Baseline: TierA%: 20, TierC%: 2, TierAT: 50, TierB%: 5

TierA%  006     007     010     012     014     016
---------------------------------------------------
20      9,32    14,41   32,54   16*,33  14,40   16,48 = 32 41 54 33 40 48 => 248
15      9,36    12*,37  14,39   19,42   19,49   18,51 = 36 37 39 42 49 51 => 254


TierA%  008     009     011     013     015     017
---------------------------------------------------
20      17,39   11,42   15,41   18,43   23,57   15,47 = 39 42 41 43 57 47 => 269
15      16,43   13,45   10,40   13,40   23,56   13,46 = 43 45 40 40 56 46 => 270

TierB% -> 5
---------------------------------------------------
5       9,32    14,41   32,54   16*,33  14,40   16,48
10      9,81    14,101  25,109  22,62   13,101  15,132
15      8,83    17,110  18,116  46*,108 12,110  13,144

Ex019 46,98 = 52
Ex020 35,78 = 43
Ex021 35,82 = 
Ex022 35,81
Ex023 34,78
Ex024 33,79
Ex025 35,80
Ex026 22,67
Ex027 30,72 
Ex028 30,74

Ex028 15,23,45
Ex031 14,22,41


TierC%  006     007     010     012     014     016
---------------------------------------------------
1       9,29    15*,42  33,56   18*,32  13,41   16,49 = 29 42 56 32 41 49 => 249
2       9,32    14,41   32,54   16*,33  14,40   16,48 = 32 41 54 33 40 48 => 248
3       9,28    14,42   32,59   12,35   14,42   16,48 = 28 42 59 35 42 48 => 254 

-> 75
TierAT  006     007      010     012     014     016
---------------------------------------------------
100     9,35    12*,39   15,39   18,42   18,45   15,48 = 35 39 39 42 45 48 => 248
75      9,34    14,35    29,41   16,40   16,41   17,49 = 34 35 41 40 41 49 => 240
50      9,32    14,41    32,54   16*,33  14,40   16,48 = 32 41 54 33 40 48 => 248
25      19*,31  101*,108 55,655  43*,63  38*,53  11,45
15      38*,48  769*,>2K X       x        x      14,41

https://github.com/testdouble/clojurescript.csv

HW:
* CSV: Output the result, # of iterations, for each experiment (summary form)
* CSV Long form: Every iteration for every experiment
* Later: Generate new test set of 500 experiments
* Why are the 0.5 to 0.7 numbers so bad?
* Make smaller changes in goods with higher elasticities

Done:
* Check TierC test with 1%
* Make 5 more experiments: 0.5 to 0.7
* Try TierA test comparing 20 v. 15 with more experiments
* Are we restricting consumer councils with a set range?

ex019: nearly 1000 WCs and 1000 CC's
ex020: 0.5 to 0.7 production range
ex021-ex025: 0.5 to 0.7 production range
ex026-ex028: 0.5 to 0.8 production range, 0.5 to 0.8 cc range
ex029: 0.7 to 0.75 production range, 0.5 to 0.8 cc range
ex030: 0.7 to 0.7 production range, 0.5 to 0.8 cc range
ex031: New regime where we take 0.1 times the number of inputs, up to 8
ex032: Repeated experiment, 0.5 to 0.8 wc range
ex033: 0.5 to 0.6 wc range
ex034: 0.75 to 0.85 wc range

===

Pseudocode for elasticities (percent change of quantity of demand compared to change in price):
1. compute social 

x1 (p1, p1, m) = [a / (a + b)][m / p1]

x2 (p1, p1, m) = [a / (a + b)][m / p2]


(map (partial compute-elasticity consumer-good) ccs)

fn compute-elasticity [consumer-good cc]
    
 ==

How to simulate the economy changing from year-to-year

1. 
2. 

Things that can change:
1. coefficients on production function 
2. coefficients on utility function 
3. supplies of labor and resources

How do you model random changes?

==

Look at the previous round, see which good was most "laggard".
Boost the price by an extra amount (50%?).

==> Figure out a way to find "laggards": Which percent surplus is changing the least?
==> Store last round's percent surplus, calculate which two have changed the least. 

Idea: Randomly change exponents in CC's so that sum of the changes has to be zero.
Idea: Change exponents to slightly increase out of range (e.g. .5 -> .7 => .5 -> .8 ) 
so that sum of WCs is out of range.
Idea: Random slight increase of all WC's. (drawn from a power-law distribution)

==> : Look at all output of (e.g.) private-good #1.
